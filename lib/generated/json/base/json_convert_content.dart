// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:Inke/bean/project_entity.dart';
import 'package:Inke/generated/json/project_entity_helper.dart';
import 'package:Inke/bean/top_list_entity.dart';
import 'package:Inke/generated/json/top_list_entity_helper.dart';
import 'package:Inke/bean/banner_entity.dart';
import 'package:Inke/generated/json/banner_entity_helper.dart';
import 'package:Inke/bean/share_one_entity.dart';
import 'package:Inke/generated/json/share_one_entity_helper.dart';
import 'package:Inke/bean/login_entity.dart';
import 'package:Inke/generated/json/login_entity_helper.dart';
import 'package:Inke/bean/project_classify_entity.dart';
import 'package:Inke/generated/json/project_classify_entity_helper.dart';
import 'package:Inke/bean/square_list_entity.dart';
import 'package:Inke/generated/json/square_list_entity_helper.dart';
import 'package:Inke/bean/used_web_entity.dart';
import 'package:Inke/generated/json/used_web_entity_helper.dart';
import 'package:Inke/bean/nav_data_entity.dart';
import 'package:Inke/generated/json/nav_data_entity_helper.dart';
import 'package:Inke/bean/author_search_entity.dart';
import 'package:Inke/generated/json/author_search_entity_helper.dart';
import 'package:Inke/bean/qa_entity.dart';
import 'package:Inke/generated/json/qa_entity_helper.dart';
import 'package:Inke/bean/home_list_entity.dart';
import 'package:Inke/generated/json/home_list_entity_helper.dart';
import 'package:Inke/bean/hotkey_entity.dart';
import 'package:Inke/generated/json/hotkey_entity_helper.dart';
import 'package:Inke/bean/sys_article_entity.dart';
import 'package:Inke/generated/json/sys_article_entity_helper.dart';
import 'package:Inke/bean/system_data_entity.dart';
import 'package:Inke/generated/json/system_data_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ProjectEntity:
				return projectEntityFromJson(data as ProjectEntity, json) as T;
			case ProjectData:
				return projectDataFromJson(data as ProjectData, json) as T;
			case ProjectDataDatas:
				return projectDataDatasFromJson(data as ProjectDataDatas, json) as T;
			case ProjectDataDatasTags:
				return projectDataDatasTagsFromJson(data as ProjectDataDatasTags, json) as T;
			case TopListEntity:
				return topListEntityFromJson(data as TopListEntity, json) as T;
			case TopListData:
				return topListDataFromJson(data as TopListData, json) as T;
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
			case BannerData:
				return bannerDataFromJson(data as BannerData, json) as T;
			case ShareOneEntity:
				return shareOneEntityFromJson(data as ShareOneEntity, json) as T;
			case ShareOneData:
				return shareOneDataFromJson(data as ShareOneData, json) as T;
			case ShareOneDataCoinInfo:
				return shareOneDataCoinInfoFromJson(data as ShareOneDataCoinInfo, json) as T;
			case ShareOneDataShareArticles:
				return shareOneDataShareArticlesFromJson(data as ShareOneDataShareArticles, json) as T;
			case ShareOneDataShareArticlesDatas:
				return shareOneDataShareArticlesDatasFromJson(data as ShareOneDataShareArticlesDatas, json) as T;
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case LoginData:
				return loginDataFromJson(data as LoginData, json) as T;
			case ProjectClassifyEntity:
				return projectClassifyEntityFromJson(data as ProjectClassifyEntity, json) as T;
			case ProjectClassifyData:
				return projectClassifyDataFromJson(data as ProjectClassifyData, json) as T;
			case SquareListEntity:
				return squareListEntityFromJson(data as SquareListEntity, json) as T;
			case SquareListData:
				return squareListDataFromJson(data as SquareListData, json) as T;
			case SquareListDataDatas:
				return squareListDataDatasFromJson(data as SquareListDataDatas, json) as T;
			case UsedWebEntity:
				return usedWebEntityFromJson(data as UsedWebEntity, json) as T;
			case UsedWebData:
				return usedWebDataFromJson(data as UsedWebData, json) as T;
			case NavDataEntity:
				return navDataEntityFromJson(data as NavDataEntity, json) as T;
			case NavDataData:
				return navDataDataFromJson(data as NavDataData, json) as T;
			case NavDataDataArticles:
				return navDataDataArticlesFromJson(data as NavDataDataArticles, json) as T;
			case AuthorSearchEntity:
				return authorSearchEntityFromJson(data as AuthorSearchEntity, json) as T;
			case AuthorSearchData:
				return authorSearchDataFromJson(data as AuthorSearchData, json) as T;
			case AuthorSearchDataDatas:
				return authorSearchDataDatasFromJson(data as AuthorSearchDataDatas, json) as T;
			case AuthorSearchDataDatasTags:
				return authorSearchDataDatasTagsFromJson(data as AuthorSearchDataDatasTags, json) as T;
			case QaEntity:
				return qaEntityFromJson(data as QaEntity, json) as T;
			case QaData:
				return qaDataFromJson(data as QaData, json) as T;
			case QaDataDatas:
				return qaDataDatasFromJson(data as QaDataDatas, json) as T;
			case QaDataDatasTags:
				return qaDataDatasTagsFromJson(data as QaDataDatasTags, json) as T;
			case HomeListEntity:
				return homeListEntityFromJson(data as HomeListEntity, json) as T;
			case HomeListData:
				return homeListDataFromJson(data as HomeListData, json) as T;
			case HomeListDataDatas:
				return homeListDataDatasFromJson(data as HomeListDataDatas, json) as T;
			case HotkeyEntity:
				return hotkeyEntityFromJson(data as HotkeyEntity, json) as T;
			case HotkeyData:
				return hotkeyDataFromJson(data as HotkeyData, json) as T;
			case SysArticleEntity:
				return sysArticleEntityFromJson(data as SysArticleEntity, json) as T;
			case SysArticleData:
				return sysArticleDataFromJson(data as SysArticleData, json) as T;
			case SysArticleDataDatas:
				return sysArticleDataDatasFromJson(data as SysArticleDataDatas, json) as T;
			case SystemDataEntity:
				return systemDataEntityFromJson(data as SystemDataEntity, json) as T;
			case SystemDataData:
				return systemDataDataFromJson(data as SystemDataData, json) as T;
			case SystemDataDataChildren:
				return systemDataDataChildrenFromJson(data as SystemDataDataChildren, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ProjectEntity:
				return projectEntityToJson(data as ProjectEntity);
			case ProjectData:
				return projectDataToJson(data as ProjectData);
			case ProjectDataDatas:
				return projectDataDatasToJson(data as ProjectDataDatas);
			case ProjectDataDatasTags:
				return projectDataDatasTagsToJson(data as ProjectDataDatasTags);
			case TopListEntity:
				return topListEntityToJson(data as TopListEntity);
			case TopListData:
				return topListDataToJson(data as TopListData);
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			case BannerData:
				return bannerDataToJson(data as BannerData);
			case ShareOneEntity:
				return shareOneEntityToJson(data as ShareOneEntity);
			case ShareOneData:
				return shareOneDataToJson(data as ShareOneData);
			case ShareOneDataCoinInfo:
				return shareOneDataCoinInfoToJson(data as ShareOneDataCoinInfo);
			case ShareOneDataShareArticles:
				return shareOneDataShareArticlesToJson(data as ShareOneDataShareArticles);
			case ShareOneDataShareArticlesDatas:
				return shareOneDataShareArticlesDatasToJson(data as ShareOneDataShareArticlesDatas);
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case LoginData:
				return loginDataToJson(data as LoginData);
			case ProjectClassifyEntity:
				return projectClassifyEntityToJson(data as ProjectClassifyEntity);
			case ProjectClassifyData:
				return projectClassifyDataToJson(data as ProjectClassifyData);
			case SquareListEntity:
				return squareListEntityToJson(data as SquareListEntity);
			case SquareListData:
				return squareListDataToJson(data as SquareListData);
			case SquareListDataDatas:
				return squareListDataDatasToJson(data as SquareListDataDatas);
			case UsedWebEntity:
				return usedWebEntityToJson(data as UsedWebEntity);
			case UsedWebData:
				return usedWebDataToJson(data as UsedWebData);
			case NavDataEntity:
				return navDataEntityToJson(data as NavDataEntity);
			case NavDataData:
				return navDataDataToJson(data as NavDataData);
			case NavDataDataArticles:
				return navDataDataArticlesToJson(data as NavDataDataArticles);
			case AuthorSearchEntity:
				return authorSearchEntityToJson(data as AuthorSearchEntity);
			case AuthorSearchData:
				return authorSearchDataToJson(data as AuthorSearchData);
			case AuthorSearchDataDatas:
				return authorSearchDataDatasToJson(data as AuthorSearchDataDatas);
			case AuthorSearchDataDatasTags:
				return authorSearchDataDatasTagsToJson(data as AuthorSearchDataDatasTags);
			case QaEntity:
				return qaEntityToJson(data as QaEntity);
			case QaData:
				return qaDataToJson(data as QaData);
			case QaDataDatas:
				return qaDataDatasToJson(data as QaDataDatas);
			case QaDataDatasTags:
				return qaDataDatasTagsToJson(data as QaDataDatasTags);
			case HomeListEntity:
				return homeListEntityToJson(data as HomeListEntity);
			case HomeListData:
				return homeListDataToJson(data as HomeListData);
			case HomeListDataDatas:
				return homeListDataDatasToJson(data as HomeListDataDatas);
			case HotkeyEntity:
				return hotkeyEntityToJson(data as HotkeyEntity);
			case HotkeyData:
				return hotkeyDataToJson(data as HotkeyData);
			case SysArticleEntity:
				return sysArticleEntityToJson(data as SysArticleEntity);
			case SysArticleData:
				return sysArticleDataToJson(data as SysArticleData);
			case SysArticleDataDatas:
				return sysArticleDataDatasToJson(data as SysArticleDataDatas);
			case SystemDataEntity:
				return systemDataEntityToJson(data as SystemDataEntity);
			case SystemDataData:
				return systemDataDataToJson(data as SystemDataData);
			case SystemDataDataChildren:
				return systemDataDataChildrenToJson(data as SystemDataDataChildren);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ProjectEntity).toString()){
			return ProjectEntity().fromJson(json);
		}	else if(type == (ProjectData).toString()){
			return ProjectData().fromJson(json);
		}	else if(type == (ProjectDataDatas).toString()){
			return ProjectDataDatas().fromJson(json);
		}	else if(type == (ProjectDataDatasTags).toString()){
			return ProjectDataDatasTags().fromJson(json);
		}	else if(type == (TopListEntity).toString()){
			return TopListEntity().fromJson(json);
		}	else if(type == (TopListData).toString()){
			return TopListData().fromJson(json);
		}	else if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}	else if(type == (BannerData).toString()){
			return BannerData().fromJson(json);
		}	else if(type == (ShareOneEntity).toString()){
			return ShareOneEntity().fromJson(json);
		}	else if(type == (ShareOneData).toString()){
			return ShareOneData().fromJson(json);
		}	else if(type == (ShareOneDataCoinInfo).toString()){
			return ShareOneDataCoinInfo().fromJson(json);
		}	else if(type == (ShareOneDataShareArticles).toString()){
			return ShareOneDataShareArticles().fromJson(json);
		}	else if(type == (ShareOneDataShareArticlesDatas).toString()){
			return ShareOneDataShareArticlesDatas().fromJson(json);
		}	else if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}	else if(type == (LoginData).toString()){
			return LoginData().fromJson(json);
		}	else if(type == (ProjectClassifyEntity).toString()){
			return ProjectClassifyEntity().fromJson(json);
		}	else if(type == (ProjectClassifyData).toString()){
			return ProjectClassifyData().fromJson(json);
		}	else if(type == (SquareListEntity).toString()){
			return SquareListEntity().fromJson(json);
		}	else if(type == (SquareListData).toString()){
			return SquareListData().fromJson(json);
		}	else if(type == (SquareListDataDatas).toString()){
			return SquareListDataDatas().fromJson(json);
		}	else if(type == (UsedWebEntity).toString()){
			return UsedWebEntity().fromJson(json);
		}	else if(type == (UsedWebData).toString()){
			return UsedWebData().fromJson(json);
		}	else if(type == (NavDataEntity).toString()){
			return NavDataEntity().fromJson(json);
		}	else if(type == (NavDataData).toString()){
			return NavDataData().fromJson(json);
		}	else if(type == (NavDataDataArticles).toString()){
			return NavDataDataArticles().fromJson(json);
		}	else if(type == (AuthorSearchEntity).toString()){
			return AuthorSearchEntity().fromJson(json);
		}	else if(type == (AuthorSearchData).toString()){
			return AuthorSearchData().fromJson(json);
		}	else if(type == (AuthorSearchDataDatas).toString()){
			return AuthorSearchDataDatas().fromJson(json);
		}	else if(type == (AuthorSearchDataDatasTags).toString()){
			return AuthorSearchDataDatasTags().fromJson(json);
		}	else if(type == (QaEntity).toString()){
			return QaEntity().fromJson(json);
		}	else if(type == (QaData).toString()){
			return QaData().fromJson(json);
		}	else if(type == (QaDataDatas).toString()){
			return QaDataDatas().fromJson(json);
		}	else if(type == (QaDataDatasTags).toString()){
			return QaDataDatasTags().fromJson(json);
		}	else if(type == (HomeListEntity).toString()){
			return HomeListEntity().fromJson(json);
		}	else if(type == (HomeListData).toString()){
			return HomeListData().fromJson(json);
		}	else if(type == (HomeListDataDatas).toString()){
			return HomeListDataDatas().fromJson(json);
		}	else if(type == (HotkeyEntity).toString()){
			return HotkeyEntity().fromJson(json);
		}	else if(type == (HotkeyData).toString()){
			return HotkeyData().fromJson(json);
		}	else if(type == (SysArticleEntity).toString()){
			return SysArticleEntity().fromJson(json);
		}	else if(type == (SysArticleData).toString()){
			return SysArticleData().fromJson(json);
		}	else if(type == (SysArticleDataDatas).toString()){
			return SysArticleDataDatas().fromJson(json);
		}	else if(type == (SystemDataEntity).toString()){
			return SystemDataEntity().fromJson(json);
		}	else if(type == (SystemDataData).toString()){
			return SystemDataData().fromJson(json);
		}	else if(type == (SystemDataDataChildren).toString()){
			return SystemDataDataChildren().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ProjectEntity>[] is M){
			return data.map<ProjectEntity>((e) => ProjectEntity().fromJson(e)).toList() as M;
		}	else if(<ProjectData>[] is M){
			return data.map<ProjectData>((e) => ProjectData().fromJson(e)).toList() as M;
		}	else if(<ProjectDataDatas>[] is M){
			return data.map<ProjectDataDatas>((e) => ProjectDataDatas().fromJson(e)).toList() as M;
		}	else if(<ProjectDataDatasTags>[] is M){
			return data.map<ProjectDataDatasTags>((e) => ProjectDataDatasTags().fromJson(e)).toList() as M;
		}	else if(<TopListEntity>[] is M){
			return data.map<TopListEntity>((e) => TopListEntity().fromJson(e)).toList() as M;
		}	else if(<TopListData>[] is M){
			return data.map<TopListData>((e) => TopListData().fromJson(e)).toList() as M;
		}	else if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}	else if(<BannerData>[] is M){
			return data.map<BannerData>((e) => BannerData().fromJson(e)).toList() as M;
		}	else if(<ShareOneEntity>[] is M){
			return data.map<ShareOneEntity>((e) => ShareOneEntity().fromJson(e)).toList() as M;
		}	else if(<ShareOneData>[] is M){
			return data.map<ShareOneData>((e) => ShareOneData().fromJson(e)).toList() as M;
		}	else if(<ShareOneDataCoinInfo>[] is M){
			return data.map<ShareOneDataCoinInfo>((e) => ShareOneDataCoinInfo().fromJson(e)).toList() as M;
		}	else if(<ShareOneDataShareArticles>[] is M){
			return data.map<ShareOneDataShareArticles>((e) => ShareOneDataShareArticles().fromJson(e)).toList() as M;
		}	else if(<ShareOneDataShareArticlesDatas>[] is M){
			return data.map<ShareOneDataShareArticlesDatas>((e) => ShareOneDataShareArticlesDatas().fromJson(e)).toList() as M;
		}	else if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}	else if(<LoginData>[] is M){
			return data.map<LoginData>((e) => LoginData().fromJson(e)).toList() as M;
		}	else if(<ProjectClassifyEntity>[] is M){
			return data.map<ProjectClassifyEntity>((e) => ProjectClassifyEntity().fromJson(e)).toList() as M;
		}	else if(<ProjectClassifyData>[] is M){
			return data.map<ProjectClassifyData>((e) => ProjectClassifyData().fromJson(e)).toList() as M;
		}	else if(<SquareListEntity>[] is M){
			return data.map<SquareListEntity>((e) => SquareListEntity().fromJson(e)).toList() as M;
		}	else if(<SquareListData>[] is M){
			return data.map<SquareListData>((e) => SquareListData().fromJson(e)).toList() as M;
		}	else if(<SquareListDataDatas>[] is M){
			return data.map<SquareListDataDatas>((e) => SquareListDataDatas().fromJson(e)).toList() as M;
		}	else if(<UsedWebEntity>[] is M){
			return data.map<UsedWebEntity>((e) => UsedWebEntity().fromJson(e)).toList() as M;
		}	else if(<UsedWebData>[] is M){
			return data.map<UsedWebData>((e) => UsedWebData().fromJson(e)).toList() as M;
		}	else if(<NavDataEntity>[] is M){
			return data.map<NavDataEntity>((e) => NavDataEntity().fromJson(e)).toList() as M;
		}	else if(<NavDataData>[] is M){
			return data.map<NavDataData>((e) => NavDataData().fromJson(e)).toList() as M;
		}	else if(<NavDataDataArticles>[] is M){
			return data.map<NavDataDataArticles>((e) => NavDataDataArticles().fromJson(e)).toList() as M;
		}	else if(<AuthorSearchEntity>[] is M){
			return data.map<AuthorSearchEntity>((e) => AuthorSearchEntity().fromJson(e)).toList() as M;
		}	else if(<AuthorSearchData>[] is M){
			return data.map<AuthorSearchData>((e) => AuthorSearchData().fromJson(e)).toList() as M;
		}	else if(<AuthorSearchDataDatas>[] is M){
			return data.map<AuthorSearchDataDatas>((e) => AuthorSearchDataDatas().fromJson(e)).toList() as M;
		}	else if(<AuthorSearchDataDatasTags>[] is M){
			return data.map<AuthorSearchDataDatasTags>((e) => AuthorSearchDataDatasTags().fromJson(e)).toList() as M;
		}	else if(<QaEntity>[] is M){
			return data.map<QaEntity>((e) => QaEntity().fromJson(e)).toList() as M;
		}	else if(<QaData>[] is M){
			return data.map<QaData>((e) => QaData().fromJson(e)).toList() as M;
		}	else if(<QaDataDatas>[] is M){
			return data.map<QaDataDatas>((e) => QaDataDatas().fromJson(e)).toList() as M;
		}	else if(<QaDataDatasTags>[] is M){
			return data.map<QaDataDatasTags>((e) => QaDataDatasTags().fromJson(e)).toList() as M;
		}	else if(<HomeListEntity>[] is M){
			return data.map<HomeListEntity>((e) => HomeListEntity().fromJson(e)).toList() as M;
		}	else if(<HomeListData>[] is M){
			return data.map<HomeListData>((e) => HomeListData().fromJson(e)).toList() as M;
		}	else if(<HomeListDataDatas>[] is M){
			return data.map<HomeListDataDatas>((e) => HomeListDataDatas().fromJson(e)).toList() as M;
		}	else if(<HotkeyEntity>[] is M){
			return data.map<HotkeyEntity>((e) => HotkeyEntity().fromJson(e)).toList() as M;
		}	else if(<HotkeyData>[] is M){
			return data.map<HotkeyData>((e) => HotkeyData().fromJson(e)).toList() as M;
		}	else if(<SysArticleEntity>[] is M){
			return data.map<SysArticleEntity>((e) => SysArticleEntity().fromJson(e)).toList() as M;
		}	else if(<SysArticleData>[] is M){
			return data.map<SysArticleData>((e) => SysArticleData().fromJson(e)).toList() as M;
		}	else if(<SysArticleDataDatas>[] is M){
			return data.map<SysArticleDataDatas>((e) => SysArticleDataDatas().fromJson(e)).toList() as M;
		}	else if(<SystemDataEntity>[] is M){
			return data.map<SystemDataEntity>((e) => SystemDataEntity().fromJson(e)).toList() as M;
		}	else if(<SystemDataData>[] is M){
			return data.map<SystemDataData>((e) => SystemDataData().fromJson(e)).toList() as M;
		}	else if(<SystemDataDataChildren>[] is M){
			return data.map<SystemDataDataChildren>((e) => SystemDataDataChildren().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}